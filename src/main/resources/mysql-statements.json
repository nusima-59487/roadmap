{ 
    "version": "0.0.3_20250418",  
    "init": [ 
        "CREATE TABLE IF NOT EXISTS Nodes (node_id INT NOT NULL AUTO_INCREMENT, coord_x INT NOT NULL, coord_z INT NOT NULL, name VARCHAR(64), aux_node BOOLEAN NOT NULL DEFAULT FALSE, has_stop_sign BOOLEAN, has_traffic_light BOOLEAN, create_time DATETIME NOT NULL DEFAULT NOW(), last_update_user_uuid VARCHAR(36) NOT NULL, last_update_time DATETIME NOT NULL DEFAULT NOW(), PRIMARY KEY (node_id));", 
        "CREATE TABLE IF NOT EXISTS Segments (segment_id INT NOT NULL AUTO_INCREMENT, starting_node INT NOT NULL, ending_node INT NOT NULL, is_one_way BOOLEAN NOT NULL DEFAULT FALSE,  lane_count_forward INT NOT NULL DEFAULT 2, lane_count_backward INT DEFAULT 2, speed_limit INT NOT NULL DEFAULT 50, road_type VARCHAR(15) NOT NULL DEFAULT \"Road\", create_time DATETIME NOT NULL DEFAULT NOW(), last_update_user_uuid VARCHAR(36) NOT NULL, last_update_time DATETIME NOT NULL DEFAULT NOW(), PRIMARY KEY (segment_id), FOREIGN KEY (starting_node) REFERENCES Nodes(node_id) ON UPDATE CASCADE ON DELETE CASCADE, FOREIGN KEY (ending_node) REFERENCES Nodes(node_id) ON UPDATE CASCADE ON DELETE CASCADE);",
        "CREATE TABLE SegmentAlignments (segment_id INT NOT NULL, aux_node_id INT NOT NULL, alignment_index INT NOT NULL, lod_level INT NOT NULL DEFAULT 1, create_time DATETIME NOT NULL DEFAULT NOW(), last_update_user_uuid VARCHAR(36) NOT NULL, last_update_time DATETIME NOT NULL DEFAULT NOW(), Foreign Key (segment_id) REFERENCES Segments(segment_id) ON UPDATE CASCADE ON DELETE CASCADE, Foreign Key (aux_node_id) REFERENCES Nodes(node_id) ON UPDATE CASCADE ON DELETE CASCADE, PRIMARY KEY (segment_id, alignment_index));", 
        "CREATE TABLE NodeConnections ( /*Main node connections*/ node_id INT NOT NULL, direction ENUM('n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw', 'none') NOT NULL DEFAULT 'none',  segment_id INT NOT NULL, create_time DATETIME NOT NULL DEFAULT NOW(), last_update_user_uuid VARCHAR(36) NOT NULL, last_update_time DATETIME NOT NULL DEFAULT NOW(), FOREIGN KEY (node_id) REFERENCES Nodes(node_id) ON UPDATE CASCADE ON DELETE CASCADE, FOREIGN KEY (segment_id) REFERENCES Segments(segment_id) ON UPDATE CASCADE ON DELETE CASCADE, PRIMARY KEY (node_id, direction));",
        "CREATE PROCEDURE add_segment ( IN start_node INT, IN start_node_dir VARCHAR(2), IN end_node INT, IN end_node_dir VARCHAR(2), IN lanes_forward INT, IN lanes_backward INT, IN speed INT, IN type VARCHAR(15), IN create_user VARCHAR(36)) BEGIN DECLARE segment_key INT; IF (select aux_node from nodes where node_id = start_node) = 0 THEN update nodes set aux_node = TRUE where node_id = start_node; END IF; IF (select aux_node from nodes where node_id = end_node) = 0 THEN update nodes set aux_node = TRUE where node_id = end_node; END IF; /* change nodes into main if aux */ INSERT INTO segments (starting_node, ending_node, lane_count_forward, lane_count_backward, road_type, speed_limit, last_update_user_uuid) VALUES (start_node, end_node, lanes_forward, lanes_backward, type, speed, create_user);  SET segment_key = LAST_INSERT_ID();  INSERT INTO nodeconnections (node_id, direction, segment_id, last_update_user_uuid) VALUES (start_node, start_node_dir, segment_key, create_user); INSERT INTO nodeconnections (node_id, direction, segment_id, last_update_user_uuid) VALUES (end_node, end_node_dir, segment_key, create_user); END;", 
        "CREATE PROCEDURE create_aux_node ( IN segment INT,  IN node_index INT, IN coordx INT, IN coordz INT, IN create_user VARCHAR(36)) BEGIN DECLARE node_key INT; INSERT INTO nodes (coord_x, coord_z, aux_node, last_update_user_uuid) VALUES (coordx, coordz, TRUE, create_user); SET node_key = LAST_INSERT_ID(); INSERT INTO segmentalignments (segment_id, aux_node_id, alignment_index, last_update_user_uuid) VALUES (segment, node_key, node_index, create_user); END;",
        "CREATE PROCEDURE get_node_id_from_coords ( IN coordx INT,  IN coordz INT, OUT id INT) BEGIN  SELECT node_id INTO id FROM Nodes  WHERE Nodes.coord_x = coordx AND Nodes.coord_z = coordz; END; "
    ]
}